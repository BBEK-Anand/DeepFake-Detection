{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e165cb1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f3cca9af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>.container { width:100% !important; }</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%HTML\n",
    "<style>.container { width:100% !important; }</style>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6de523aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torchsummary import summary\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "38066931",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_shape = (3,128,128)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aa3a85c",
   "metadata": {},
   "source": [
    "# Model 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "20da61bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------\n",
      "        Layer (type)               Output Shape         Param #\n",
      "================================================================\n",
      "            Conv2d-1          [-1, 8, 128, 128]             224\n",
      "       BatchNorm2d-2          [-1, 8, 128, 128]              16\n",
      "         MaxPool2d-3            [-1, 8, 64, 64]               0\n",
      "            Conv2d-4            [-1, 8, 64, 64]           1,608\n",
      "       BatchNorm2d-5            [-1, 8, 64, 64]              16\n",
      "         MaxPool2d-6            [-1, 8, 32, 32]               0\n",
      "            Conv2d-7           [-1, 16, 32, 32]           3,216\n",
      "       BatchNorm2d-8           [-1, 16, 32, 32]              32\n",
      "         MaxPool2d-9           [-1, 16, 16, 16]               0\n",
      "           Conv2d-10           [-1, 16, 16, 16]           6,416\n",
      "      BatchNorm2d-11           [-1, 16, 16, 16]              32\n",
      "        MaxPool2d-12             [-1, 16, 4, 4]               0\n",
      "           Linear-13                   [-1, 16]           4,112\n",
      "          Dropout-14                   [-1, 16]               0\n",
      "           Linear-15                    [-1, 1]              17\n",
      "================================================================\n",
      "Total params: 15,689\n",
      "Trainable params: 15,689\n",
      "Non-trainable params: 0\n",
      "----------------------------------------------------------------\n",
      "Input size (MB): 0.19\n",
      "Forward/backward pass size (MB): 3.16\n",
      "Params size (MB): 0.06\n",
      "Estimated Total Size (MB): 3.41\n",
      "----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Meso4 Model\n",
    "class Meso4_01(nn.Module):\n",
    "    def __init__(self, num_classes=1):\n",
    "        super(Meso4_01, self).__init__()\n",
    "\n",
    "        self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "        self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "        self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "        self.bn1 = nn.BatchNorm2d(8)\n",
    "        self.bn2 = nn.BatchNorm2d(8)\n",
    "        self.bn3 = nn.BatchNorm2d(16)\n",
    "        self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "        self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "        self.pool2 = nn.MaxPool2d(kernel_size=4, stride=4)\n",
    "        \n",
    "        self.fc1 = nn.Linear(16 * 4 * 4, 16)\n",
    "        self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "        self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "        x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "        x = self.pool2(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "        x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.dropout(x)\n",
    "        x = self.fc2(x)\n",
    "        return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_01(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb863b77",
   "metadata": {},
   "source": [
    "# Model 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "43b89e95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------\n",
      "        Layer (type)               Output Shape         Param #\n",
      "================================================================\n",
      "            Conv2d-1          [-1, 8, 128, 128]             224\n",
      "       BatchNorm2d-2          [-1, 8, 128, 128]              16\n",
      "         MaxPool2d-3            [-1, 8, 64, 64]               0\n",
      "            Conv2d-4            [-1, 8, 64, 64]           1,608\n",
      "       BatchNorm2d-5            [-1, 8, 64, 64]              16\n",
      "         MaxPool2d-6            [-1, 8, 32, 32]               0\n",
      "            Conv2d-7           [-1, 16, 32, 32]           3,216\n",
      "       BatchNorm2d-8           [-1, 16, 32, 32]              32\n",
      "         MaxPool2d-9           [-1, 16, 16, 16]               0\n",
      "           Conv2d-10           [-1, 16, 16, 16]           6,416\n",
      "      BatchNorm2d-11           [-1, 16, 16, 16]              32\n",
      "        MaxPool2d-12             [-1, 16, 8, 8]               0\n",
      "           Linear-13                   [-1, 16]          16,400\n",
      "          Dropout-14                   [-1, 16]               0\n",
      "           Linear-15                    [-1, 1]              17\n",
      "================================================================\n",
      "Total params: 27,977\n",
      "Trainable params: 27,977\n",
      "Non-trainable params: 0\n",
      "----------------------------------------------------------------\n",
      "Input size (MB): 0.19\n",
      "Forward/backward pass size (MB): 3.16\n",
      "Params size (MB): 0.11\n",
      "Estimated Total Size (MB): 3.46\n",
      "----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Meso4 Model\n",
    "class Meso4_02(nn.Module):\n",
    "    def __init__(self, num_classes=1):\n",
    "        super(Meso4_02, self).__init__()\n",
    "\n",
    "        self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "        self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "        self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "        self.bn1 = nn.BatchNorm2d(8)\n",
    "        self.bn2 = nn.BatchNorm2d(8)\n",
    "        self.bn3 = nn.BatchNorm2d(16)\n",
    "        self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "        self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "        \n",
    "        self.fc1 = nn.Linear(16 * 8 * 8, 16)\n",
    "        self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "        self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "        x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "        x = self.pool(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "        x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.dropout(x)\n",
    "        x = self.fc2(x)\n",
    "        return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_02(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "df3ac4af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 128, 128)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b69aba9",
   "metadata": {},
   "source": [
    "# Model 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "96153a86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2, 8, 43, 43])\n",
      "torch.Size([2, 16, 13, 13])\n",
      "ll torch.Size([2, 256])\n",
      "opop torch.Size([2, 16])\n",
      "torch.Size([2, 1])\n",
      "----------------------------------------------------------------\n",
      "        Layer (type)               Output Shape         Param #\n",
      "================================================================\n",
      "            Conv2d-1          [-1, 8, 128, 128]             224\n",
      "       BatchNorm2d-2          [-1, 8, 128, 128]              16\n",
      "         MaxPool2d-3          [-1, 8, 128, 128]               0\n",
      "            Conv2d-4          [-1, 8, 128, 128]           1,608\n",
      "       BatchNorm2d-5          [-1, 8, 128, 128]              16\n",
      "         MaxPool2d-6            [-1, 8, 43, 43]               0\n",
      "            Conv2d-7           [-1, 16, 42, 42]           2,064\n",
      "       BatchNorm2d-8           [-1, 16, 42, 42]              32\n",
      "         MaxPool2d-9           [-1, 16, 13, 13]               0\n",
      "           Conv2d-10           [-1, 16, 13, 13]           6,416\n",
      "      BatchNorm2d-11           [-1, 16, 13, 13]              32\n",
      "        MaxPool2d-12             [-1, 16, 4, 4]               0\n",
      "           Linear-13                   [-1, 16]           4,112\n",
      "          Dropout-14                   [-1, 16]               0\n",
      "           Linear-15                    [-1, 1]              17\n",
      "================================================================\n",
      "Total params: 14,537\n",
      "Trainable params: 14,537\n",
      "Non-trainable params: 0\n",
      "----------------------------------------------------------------\n",
      "Input size (MB): 0.19\n",
      "Forward/backward pass size (MB): 5.61\n",
      "Params size (MB): 0.06\n",
      "Estimated Total Size (MB): 5.85\n",
      "----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Meso4 Model\n",
    "class Meso4_03(nn.Module):\n",
    "    def __init__(self, num_classes=1):\n",
    "        super(Meso4_03, self).__init__()\n",
    "\n",
    "        self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "        self.conv3 = nn.Conv2d(8, 16, kernel_size=4, padding=1)\n",
    "        self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "        self.bn1 = nn.BatchNorm2d(8)\n",
    "        self.bn2 = nn.BatchNorm2d(8)\n",
    "        self.bn3 = nn.BatchNorm2d(16)\n",
    "        self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "        self.pool1 = nn.MaxPool2d(kernel_size=5,stride=1,padding=2)\n",
    "        self.pool2 = nn.MaxPool2d(kernel_size=4,stride=3,padding=2)\n",
    "        self.pool3 = nn.MaxPool2d(kernel_size=8,stride=3,padding=2)\n",
    "        self.pool4 = nn.MaxPool2d(kernel_size=6,stride=3,padding=2)\n",
    "        \n",
    "        self.fc1 = nn.Linear(16 * 4*4, 16)\n",
    "        self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "        self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.pool1(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "        x = self.pool2(F.relu(self.bn2(self.conv2(x))))\n",
    "        print(x.shape)\n",
    "        x = self.pool3(F.relu(self.bn3(self.conv3(x))))\n",
    "        print(x.shape)\n",
    "        x = self.pool4(F.relu(self.bn4(self.conv4(x))))\n",
    "        \n",
    "        x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "        print(\"ll\",x.shape)\n",
    "        x = F.relu(self.fc1(x))\n",
    "        print(\"opop\",x.shape)\n",
    "        x = self.dropout(x)\n",
    "        x = self.fc2(x)\n",
    "        print(x.shape)\n",
    "        return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_03(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fe23238",
   "metadata": {},
   "source": [
    "# Model 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eb90e299",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Meso4 Model\n",
    "# class Meso4_04(nn.Module):\n",
    "#     def __init__(self, num_classes=1):\n",
    "#         super(Meso4_04, self).__init__()\n",
    "\n",
    "#         self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "#         self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "#         self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "#         self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "#         self.bn1 = nn.BatchNorm2d(8)\n",
    "#         self.bn2 = nn.BatchNorm2d(8)\n",
    "#         self.bn3 = nn.BatchNorm2d(16)\n",
    "#         self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "#         self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "#         self.pool1 = nn.MaxPool2d(kernel_size=5,stride=1,padding=2)\n",
    "#         self.pool2 = nn.MaxPool2d(kernel_size=4,stride=3,padding=2)\n",
    "#         self.pool3 = nn.MaxPool2d(kernel_size=8,stride=3,padding=2)\n",
    "#         self.pool4 = nn.MaxPool2d(kernel_size=6,stride=3,padding=2)\n",
    "        \n",
    "#         self.fc1 = nn.Linear(16 * 8 * 8, 16)\n",
    "#         self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "#         self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "#     def forward(self, x):\n",
    "#         x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "#         x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "#         x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "#         x = self.pool(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "#         x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "#         x = F.relu(self.fc1(x))\n",
    "#         x = self.dropout(x)\n",
    "#         x = self.fc2(x)\n",
    "#         return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_04(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6ce1fe2",
   "metadata": {},
   "source": [
    "# Model 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3629f390",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Meso4 Model\n",
    "# class Meso4_05(nn.Module):\n",
    "#     def __init__(self, num_classes=1):\n",
    "#         super(Meso4_05, self).__init__()\n",
    "\n",
    "#         self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "#         self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "#         self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "#         self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "#         self.bn1 = nn.BatchNorm2d(8)\n",
    "#         self.bn2 = nn.BatchNorm2d(8)\n",
    "#         self.bn3 = nn.BatchNorm2d(16)\n",
    "#         self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "#         self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "        \n",
    "#         self.fc1 = nn.Linear(16 * 8 * 8, 16)\n",
    "#         self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "#         self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "#     def forward(self, x):\n",
    "#         x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "#         x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "#         x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "#         x = self.pool(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "#         x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "#         x = F.relu(self.fc1(x))\n",
    "#         x = self.dropout(x)\n",
    "#         x = self.fc2(x)\n",
    "#         return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_05(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72e7eada",
   "metadata": {},
   "source": [
    "# Model 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0c30e9fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Meso4 Model\n",
    "# class Meso4_06(nn.Module):\n",
    "#     def __init__(self, num_classes=1):\n",
    "#         super(Meso4_06, self).__init__()\n",
    "\n",
    "#         self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "#         self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "#         self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "#         self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "#         self.bn1 = nn.BatchNorm2d(8)\n",
    "#         self.bn2 = nn.BatchNorm2d(8)\n",
    "#         self.bn3 = nn.BatchNorm2d(16)\n",
    "#         self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "#         self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "        \n",
    "#         self.fc1 = nn.Linear(16 * 8 * 8, 16)\n",
    "#         self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "#         self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "#     def forward(self, x):\n",
    "#         x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "#         x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "#         x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "#         x = self.pool(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "#         x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "#         x = F.relu(self.fc1(x))\n",
    "#         x = self.dropout(x)\n",
    "#         x = self.fc2(x)\n",
    "#         return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_02(num_classes=1).to(device)  # Move model to GPU if available\n",
    "\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7923042c",
   "metadata": {},
   "source": [
    "# Model 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e1fd1bb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Meso4 Model\n",
    "# class Meso4_07(nn.Module):\n",
    "#     def __init__(self, num_classes=1):\n",
    "#         super(Meso4_07, self).__init__()\n",
    "\n",
    "#         self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "#         self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "#         self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "#         self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "#         self.bn1 = nn.BatchNorm2d(8)\n",
    "#         self.bn2 = nn.BatchNorm2d(8)\n",
    "#         self.bn3 = nn.BatchNorm2d(16)\n",
    "#         self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "#         self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "        \n",
    "#         self.fc1 = nn.Linear(16 * 8 * 8, 16)\n",
    "#         self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "#         self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "#     def forward(self, x):\n",
    "#         x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "#         x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "#         x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "#         x = self.pool(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "#         x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "#         x = F.relu(self.fc1(x))\n",
    "#         x = self.dropout(x)\n",
    "#         x = self.fc2(x)\n",
    "#         return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_07(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9fee7ab",
   "metadata": {},
   "source": [
    "# Model 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2fca0ab8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Meso4 Model\n",
    "# class Meso4_08(nn.Module):\n",
    "#     def __init__(self, num_classes=1):\n",
    "#         super(Meso4_08, self).__init__()\n",
    "\n",
    "#         self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "#         self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "#         self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "#         self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "#         self.bn1 = nn.BatchNorm2d(8)\n",
    "#         self.bn2 = nn.BatchNorm2d(8)\n",
    "#         self.bn3 = nn.BatchNorm2d(16)\n",
    "#         self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "#         self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "        \n",
    "#         self.fc1 = nn.Linear(16 * 8 * 8, 16)\n",
    "#         self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "#         self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "#     def forward(self, x):\n",
    "#         x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "#         x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "#         x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "#         x = self.pool(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "#         x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "#         x = F.relu(self.fc1(x))\n",
    "#         x = self.dropout(x)\n",
    "#         x = self.fc2(x)\n",
    "#         return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_08(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9635f138",
   "metadata": {},
   "source": [
    "# Model 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8f0f175a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Meso4 Model\n",
    "# class Meso4_09(nn.Module):\n",
    "#     def __init__(self, num_classes=1):\n",
    "#         super(Meso4_09, self).__init__()\n",
    "\n",
    "#         self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "#         self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "#         self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "#         self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "#         self.bn1 = nn.BatchNorm2d(8)\n",
    "#         self.bn2 = nn.BatchNorm2d(8)\n",
    "#         self.bn3 = nn.BatchNorm2d(16)\n",
    "#         self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "#         self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "        \n",
    "#         self.fc1 = nn.Linear(16 * 8 * 8, 16)\n",
    "#         self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "#         self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "#     def forward(self, x):\n",
    "#         x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "#         x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "#         x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "#         x = self.pool(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "#         x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "#         x = F.relu(self.fc1(x))\n",
    "#         x = self.dropout(x)\n",
    "#         x = self.fc2(x)\n",
    "#         return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_09(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e62d0068",
   "metadata": {},
   "source": [
    "# Model 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ed9a677a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Meso4 Model\n",
    "# class Meso4_10(nn.Module):\n",
    "#     def __init__(self, num_classes=1):\n",
    "#         super(Meso4_10, self).__init__()\n",
    "\n",
    "#         self.conv1 = nn.Conv2d(3, 8, kernel_size=3, padding=1)\n",
    "#         self.conv2 = nn.Conv2d(8, 8, kernel_size=5, padding=2)\n",
    "#         self.conv3 = nn.Conv2d(8, 16, kernel_size=5, padding=2)\n",
    "#         self.conv4 = nn.Conv2d(16, 16, kernel_size=5, padding=2)  \n",
    "\n",
    "#         self.bn1 = nn.BatchNorm2d(8)\n",
    "#         self.bn2 = nn.BatchNorm2d(8)\n",
    "#         self.bn3 = nn.BatchNorm2d(16)\n",
    "#         self.bn4 = nn.BatchNorm2d(16)\n",
    "\n",
    "#         self.pool = nn.MaxPool2d(kernel_size=2,stride=2,padding=0)\n",
    "        \n",
    "#         self.fc1 = nn.Linear(16 * 8 * 8, 16)\n",
    "#         self.fc2 = nn.Linear(16, num_classes)\n",
    "        \n",
    "#         self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "#     def forward(self, x):\n",
    "#         x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        \n",
    "#         x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "#         x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "#         x = self.pool(F.relu(self.bn4(self.conv4(x))))\n",
    "\n",
    "#         x = x.view(x.size(0), -1)  # Flatten feature maps\n",
    "#         x = F.relu(self.fc1(x))\n",
    "#         x = self.dropout(x)\n",
    "#         x = self.fc2(x)\n",
    "#         return x\n",
    "\n",
    "# # Detect if GPU is available and use it\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model1 = Meso4_10(num_classes=1).to(device)  # Move model to GPU if available\n",
    "# summary(model1,input_size=input_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfe75295",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e74f1b80",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
